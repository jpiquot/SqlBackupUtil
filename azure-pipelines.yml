# dapr/dotnet-sdk pipeline

trigger:
  branches:
    include:
    - master
  tags:
    include:
    - v*
variables:
    - name: solution
      value: './SqlBackupUtil.sln'
    - name: binFiles
      value: './SqlBackupUtil/bin/$(Configuration)'
    - group: SqlBackup
 
stages:
- stage: Build
  jobs:
  - job: 'build_projects'
    pool:
      vmImage: 'windows-latest'
    workspace:
      clean: all
    strategy:
      maxParallel: 2
      matrix:
        debug:
          configuration: debug
        release:
          configuration: release
    steps:
      - task: UseDotNet@2
        displayName: 'Install dotnet SDK'
        inputs:
          packageType: sdk
          version: 5.0.401
          installationPath: $(Agent.ToolsDirectory)/dotnet
      - task: DotNetCoreCLI@2
        displayName: 'Build solution - $(Configuration)'
        inputs:
          command: 'build'
          arguments: '--configuration $(Configuration)'
          projects: $(solution)
      - task: DotNetCoreCLI@2
        condition: false
        displayName: 'Test - $(Configuration)'
        inputs:
          command: 'test'
          arguments: '--configuration $(Configuration)'
          projects: $(solution)      
      - task: DotNetCoreCLI@2
        displayName: 'Pack - $(Configuration)'
        inputs:
          command: 'pack'
          arguments: '--configuration $(Configuration)'
          packagesToPack: $(solution)
          nobuild: true
          versioningScheme: 'off'
      - task: CopyFiles@2
        condition: ne(variables['Build.Reason'], 'PullRequest')
        inputs:
          SourceFolder: $(binFiles)
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish binaries to artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: $(Configuration)
          publishLocation: 'Container'
      - task: CmdLine@2
        displayName: 'Add release tag for release branch'
        condition: and(eq(variables['Configuration'], 'release'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
        inputs:
          script: 'echo "##vso[build.addbuildtag]release'
          workingDirectory: '$(Build.ArtifactStagingDirectory)'

- stage: 'PublishPrereleaseNuGetPackage'
  displayName: 'Publish Prerelease NuGet Package'
  dependsOn: 'Build'
  condition: succeeded()
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: none

    - download: current
      artifact: 'debug'

    - task: NuGetCommand@2
      displayName: 'Push stable packages to Myget.org prerelease feed'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'MyGet'

- stage: 'PublishReleaseNuGetPackage'
  displayName: 'Publish Release NuGet Package'
  dependsOn: 'Build'
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
  jobs:
  - deployment:
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'NugetOrg'
    strategy:
     runOnce:
       deploy:
         steps:
         - checkout: none
         - download: current
           artifact: 'release'
         - task: NuGetCommand@2
           displayName: 'Push stable packages to NuGet.org feed'
           inputs:
             command: 'push'
             packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
             nuGetFeedType: 'external'
             publishFeedCredentials: 'NuGet'